{"version":3,"file":"component---src-pages-about-tsx-b34b111439fd71c8d05d.js","mappings":"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","sources":["webpack://focus-consulting/./node_modules/@chakra-ui/image/dist/index.esm.js","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/index.esm.js","webpack://focus-consulting/./src/pages/about.tsx"],"sourcesContent":["// ../../../react-shim.js\nimport React from \"react\";\n\n// src/image.tsx\nimport {\n  chakra,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone)\n      delete clone[key];\n  }\n  return clone;\n}\n\n// src/use-image.ts\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src)\n      return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin)\n      img.crossOrigin = crossOrigin;\n    if (srcSet)\n      img.srcset = srcSet;\n    if (sizes)\n      img.sizes = sizes;\n    if (loading)\n      img.loading = loading;\n    img.onload = (event) => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = (error) => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback)\n      return void 0;\n    if (status === \"loading\") {\n      load();\n    }\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n\n// src/native-image.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nvar NativeImage = forwardRef(function NativeImage2(props, ref) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props;\n  return /* @__PURE__ */ React.createElement(\"img\", {\n    width: htmlWidth,\n    height: htmlHeight,\n    ref,\n    alt,\n    ...rest\n  });\n});\nNativeImage.displayName = \"NativeImage\";\n\n// src/image.tsx\nvar Image2 = forwardRef2(function Image3(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])\n  };\n  if (showFallbackImage) {\n    if (fallback)\n      return fallback;\n    return /* @__PURE__ */ React.createElement(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n  return /* @__PURE__ */ React.createElement(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage2.displayName = \"Image\";\n\n// src/img.tsx\nimport { chakra as chakra2, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar Img = forwardRef3((props, ref) => /* @__PURE__ */ React.createElement(chakra2.img, {\n  ref,\n  as: NativeImage,\n  className: \"chakra-image\",\n  ...props\n}));\nexport {\n  Image2 as Image,\n  Img,\n  shouldShowFallbackImage,\n  useImage\n};\n","// ../../../react-shim.js\nimport React from \"react\";\n\n// src/avatar.tsx\nimport {\n  chakra as chakra4,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\nvar dataAttr = (condition) => condition ? \"\" : void 0;\nfunction callAllHandlers(...fns) {\n  return function func(event) {\n    fns.some((fn) => {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\n\n// src/avatar-context.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [AvatarStylesProvider, useAvatarStyles] = createContext({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\"\n});\n\n// src/avatar-image.tsx\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra as chakra3 } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\n\n// src/avatar-name.tsx\nimport { chakra } from \"@chakra-ui/system\";\nfunction initials(name) {\n  const [firstName, lastName] = name.split(\" \");\n  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);\n}\nfunction AvatarName(props) {\n  const { name, getInitials, ...rest } = props;\n  const styles = useAvatarStyles();\n  return /* @__PURE__ */ React.createElement(chakra.div, {\n    role: \"img\",\n    \"aria-label\": name,\n    ...rest,\n    __css: styles.label\n  }, name ? getInitials == null ? void 0 : getInitials(name) : null);\n}\nAvatarName.displayName = \"AvatarName\";\n\n// src/generic-avatar-icon.tsx\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nvar GenericAvatarIcon = (props) => /* @__PURE__ */ React.createElement(chakra2.svg, {\n  viewBox: \"0 0 128 128\",\n  color: \"#fff\",\n  width: \"100%\",\n  height: \"100%\",\n  className: \"chakra-avatar__svg\",\n  ...props\n}, /* @__PURE__ */ React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n}), /* @__PURE__ */ React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n}));\n\n// src/avatar-image.tsx\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */ React.createElement(GenericAvatarIcon, null),\n    ignoreFallback,\n    referrerPolicy\n  } = props;\n  const status = useImage({ src, onError, ignoreFallback });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /* @__PURE__ */ React.createElement(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials,\n      name\n    }) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  return /* @__PURE__ */ React.createElement(chakra3.img, {\n    src,\n    srcSet,\n    alt: name,\n    onLoad,\n    referrerPolicy,\n    className: \"chakra-avatar__img\",\n    loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n}\nAvatarImage.displayName = \"AvatarImage\";\n\n// src/avatar.tsx\nimport { useState } from \"react\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */ React.createElement(GenericAvatarIcon, null),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */ React.createElement(chakra4.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles\n  }, /* @__PURE__ */ React.createElement(AvatarStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(AvatarImage, {\n    src,\n    srcSet,\n    loading,\n    onLoad: callAllHandlers(onLoadProp, () => {\n      setIsLoaded(true);\n    }),\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    icon,\n    iconLabel,\n    ignoreFallback\n  }), children));\n});\nAvatar.displayName = \"Avatar\";\n\n// src/avatar-group.tsx\nimport {\n  chakra as chakra5,\n  forwardRef as forwardRef2,\n  omitThemingProps as omitThemingProps2,\n  useMultiStyleConfig as useMultiStyleConfig2\n} from \"@chakra-ui/system\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\n// src/avatar-group.tsx\nimport { cloneElement as cloneElement2 } from \"react\";\nvar AvatarGroup = forwardRef2(function AvatarGroup2(props, ref) {\n  const styles = useMultiStyleConfig2(\"Avatar\", props);\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = omitThemingProps2(props);\n  const validChildren = getValidChildren(children);\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  const excess = max != null && validChildren.length - max;\n  const reversedChildren = childrenWithinMax.reverse();\n  const clones = reversedChildren.map((child, index) => {\n    const isFirstAvatar = index === 0;\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: child.props.borderColor ?? borderColor,\n      showBorder: true\n    };\n    return cloneElement2(child, compact(childProps));\n  });\n  const groupStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n    ...styles.group\n  };\n  const excessStyles = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel\n  };\n  return /* @__PURE__ */ React.createElement(chakra5.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    ...rest,\n    className: cx(\"chakra-avatar__group\", props.className)\n  }, excess > 0 && /* @__PURE__ */ React.createElement(chakra5.span, {\n    className: \"chakra-avatar__excess\",\n    __css: excessStyles\n  }, `+${excess}`), clones);\n});\nAvatarGroup.displayName = \"AvatarGroup\";\n\n// src/avatar-badge.tsx\nimport {\n  chakra as chakra6,\n  forwardRef as forwardRef3\n} from \"@chakra-ui/system\";\nvar placementMap = {\n  \"top-start\": {\n    top: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, -25%)\"\n  },\n  \"top-end\": {\n    top: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, -25%)\"\n  },\n  \"bottom-start\": {\n    bottom: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, 25%)\"\n  },\n  \"bottom-end\": {\n    bottom: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, 25%)\"\n  }\n};\nvar AvatarBadge = forwardRef3(function AvatarBadge2(props, ref) {\n  const { placement = \"bottom-end\", className, ...rest } = props;\n  const styles = useAvatarStyles();\n  const placementStyles = placementMap[placement];\n  const badgeStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...placementStyles,\n    ...styles.badge\n  };\n  return /* @__PURE__ */ React.createElement(chakra6.div, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar__badge\", className),\n    __css: badgeStyles\n  });\n});\nAvatarBadge.displayName = \"AvatarBadge\";\nexport {\n  Avatar,\n  AvatarBadge,\n  AvatarGroup,\n  GenericAvatarIcon,\n  useAvatarStyles\n};\n","import * as React from 'react'\n\nimport {\n    Avatar,\n    Box,\n    Button,\n    Divider,\n    Heading,\n    SimpleGrid,\n    Text,\n} from '@chakra-ui/react'\nimport { HeadFC, Link, PageProps } from 'gatsby'\n\nimport Hero from '../layout/Hero'\nimport Layout from '../layout/Layout'\nimport { SEO } from '../components/seo'\nimport Section from '../layout/Section'\n\nconst content = {\n    heroTitle: 'About Us',\n    heroDescription:\n        'We are a minority-owned digital services company focused on projects with social impact.',\n    sections: [\n        {\n            title: 'Our Story',\n            description:\n                'Focus was founded in 2019 to bring together a diverse set of industry and government experiences, and best-in-class digital services capabilities in agile software development, human-centered design, and DevSecOps. Our projects span work that addresses equity, healthcare, benefits, and learning across government and commercial clients.',\n            backgroundColor: 'blue.700',\n            fontColor: 'white',\n        },\n        {\n            title: 'Core Values',\n            description:\n                'Our values guide both how we work with our colleagues and how we view our partnerships.',\n            items: [\n                {\n                    title: 'Clarity and transparency',\n                    description:\n                        'Our jobs involve taking complicated topics and working to remove the ambiguity; our clients rely on us to work and communicate honestly and efficiently.',\n                },\n                {\n                    title: 'Do the right thing',\n                    description:\n                        \"We always come prepared, researching and documenting before raising topics with our clients.  We respect our clients' time by asking questions that get to the root of things faster. \",\n                },\n                {\n                    title: 'Do what you say',\n                    description:\n                        'Our reputation with our clients is critical to our success as a business and that reputation is built by consistently delivering on what we promise to do.',\n                },\n                {\n                    title: 'Exhibit a growth mindset',\n                    description:\n                        'The industry is constantly evolving, and in order to stay relevant we constantly grow our skill sets to serve current and future clients.',\n                },\n            ],\n        },\n        {\n            title: 'Expertise',\n            items: [\n                {\n                    title: 'Software Engineering',\n                    description:\n                        'We bring deep expertise in full-stack web development using agile development processes. Our staff have successfully built and maintained high complexity applications serving millions of users.',\n                },\n                {\n                    title: 'Research & Design ',\n                    description:\n                        'We center our work on human-centered design and research to gain deep insights into user challenges and needs. We use user research and testing before and after feature launches to gain insights and make our work more valuable.',\n                },\n                {\n                    title: 'Data Engineering',\n                    description:\n                        'Our teams have strong experience processing, transforming, integrating, and synthesizing large volumes of diverse data sets. We have a depth of experience working with healthcare data across government, insurers, and hospitals.',\n                },\n                {\n                    title: 'Product Management',\n                    description:\n                        'Our product managers work with their design and research colleagues to understand customer needs, work with our stakeholders, and craft high value solutions. We make data-driven product decisions by defining and tracking success metrics within an agile development approach.',\n                },\n                {\n                    title: 'DevOps & Cloud Infrastructure',\n                    description:\n                        'We develop and improve robust CI/CD processes that free up developers to focus on providing user value, accessibility, and privacy. We work across the cloud ecosystem (AWS, Azure, Google Cloud). We use infrastructure as code approach to consistently define our cloud resources with automated deploys.',\n                },\n                {\n                    title: 'Project & Program Management',\n                    description:\n                        'Our project managers tie everything together by supporting our planning, stakeholder coordination, and delivery work. We use strong documentation and communication practices to work efficiently in an increasingly distributed world.',\n                },\n            ],\n            backgroundColor: 'orange.300',\n            customId: 'expertise',\n            anchor: 'expertise',\n        },\n        {\n            title: 'Core Team',\n            description: 'Meet our diverse team of technologists.',\n            customId: 'team',\n        },\n    ],\n}\n\nconst team = [\n    {\n        name: 'Eyuel Abebe',\n        title: 'Software Engineer',\n        photo: '/images/staff/eyuel.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Ant Addis',\n        title: 'CEO',\n        photo: '/images/staff/anteneh-3.webp',\n        department: 'leadership',\n    },\n    {\n        name: 'Kolawole Balegun',\n        title: 'Software Engineer',\n        photo: '/images/staff/kola.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Iverson Diles',\n        title: 'Software Engineer',\n        photo: '/images/staff/iverson-diles.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Sid Hackney',\n        title: 'Software Engineer',\n        photo: '/images/staff/sid.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Michael Kalish',\n        title: 'CTO',\n        photo: '/images/staff/kalish-profile.webp',\n        department: 'leadership',\n    },\n    {\n        name: 'Bethlehem Mulugeta',\n        title: 'Recruiting',\n        department: 'support',\n    },\n    {\n        name: 'Kevon Paynter',\n        title: 'Product Manager',\n        photo: '/images/staff/kevon.webp',\n        department: 'product',\n    },\n    {\n        name: 'Mike Liu',\n        title: 'Software Engineer',\n        department: 'engineering',\n    },\n    {\n        name: 'Gabriel Dorsch',\n        title: 'Software Engineer',\n        photo: '/images/staff/gabriel.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Thu Pham',\n        title: 'Software Engineer',\n        department: 'engineering',\n    },\n    {\n        name: 'Jack Wang',\n        title: 'Software Engineer',\n        photo: '/images/staff/jack-wang.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Kant Kodali',\n        title: 'Software Engineer',\n        photo: '/images/staff/kant_kodali.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Jamie Albinson',\n        title: 'Software Engineer',\n        photo: '/images/staff/jamie-albinson.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Logan Ricard',\n        title: 'Software Engineer',\n        photo: '/images/staff/logan-ricard.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Carl Hicks',\n        title: 'Support Engineer',\n        photo: '/images/staff/carl-hicks.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Tshering Yudon',\n        title: 'Designer',\n        photo: '/images/staff/tshering-yudon.webp',\n        department: 'product',\n    },\n]\n\nconst AboutPage: React.FC<PageProps> = () => {\n    const customRenderMap: any = {\n        team: () => {\n            return (\n                <>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Leadership</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) =>\n                                        person.department == 'leadership'\n                                )\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Product</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) => person.department == 'product'\n                                )\n                                .sort((a, b) => a.name.localeCompare(b.name))\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Engineering</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) =>\n                                        person.department == 'engineering'\n                                )\n                                .sort((a, b) => a.name.localeCompare(b.name))\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box>\n                        <Heading marginBottom=\"10\">Support</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) => person.department == 'support'\n                                )\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Button\n                            variant=\"solid\"\n                            fontSize={{ base: '2xl', md: '2xl' }}\n                            colorScheme=\"blue\"\n                            as={Link}\n                            to=\"/careers\"\n                        >\n                            Join the Team\n                        </Button>\n                    </Box>\n                </>\n            )\n        },\n        expertise: () => {\n            return (\n                <Button\n                    variant=\"solid\"\n                    fontSize={{ base: '2xl', md: '2xl' }}\n                    colorScheme=\"blue\"\n                    as={Link}\n                    to=\"/our-work\"\n                >\n                    See Examples of Our Work\n                </Button>\n            )\n        },\n    }\n\n    return (\n        <Layout>\n            <Hero\n                title={content.heroTitle}\n                description={content.heroDescription}\n            />\n            {content.sections.map((section) => {\n                return (\n                    <Section\n                        title={section.title}\n                        description={section.description}\n                        backgroundColor={section.backgroundColor}\n                        fontColor={section.fontColor}\n                        items={section.items}\n                        anchor={section.anchor}\n                    >\n                        {section.customId &&\n                            customRenderMap[section.customId]()}\n                    </Section>\n                )\n            })}\n        </Layout>\n    )\n}\n\nexport default AboutPage\n\nexport const Head: HeadFC = () => <SEO title=\"Focus - About\" />\n"],"names":["omit","object","keysToOmit","clone","Object","assign","key","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","useState","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","NativeImage","ref","htmlWidth","htmlHeight","alt","rest","width","height","displayName","fallbackSrc","fallback","align","fit","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","as","className","cx","classNames","filter","Boolean","join","callAllHandlers","fns","some","fn","defaultPrevented","AvatarStylesProvider","useAvatarStyles","name","hookName","providerName","initials","firstName","lastName","split","charAt","AvatarName","getInitials","styles","role","__css","label","GenericAvatarIcon","viewBox","color","fill","d","AvatarImage","borderRadius","iconLabel","icon","cloneElement","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","Avatar","isLoaded","setIsLoaded","showBorder","onLoadProp","children","borderColor","avatarStyles","borderWidth","container","condition","value","max","spacing","validChildren","childrenWithinMax","slice","excess","length","clones","reverse","map","child","index","childProps","marginEnd","size","compact","groupStyles","flexDirection","group","excessStyles","marginStart","excessLabel","placementMap","top","insetStart","transform","insetEnd","bottom","placement","badgeStyles","badge","content","heroTitle","heroDescription","sections","title","description","backgroundColor","fontColor","items","customId","anchor","team","photo","department","customRenderMap","React","Box","marginBottom","Heading","SimpleGrid","columns","base","md","mb","person","Text","fontSize","Divider","sort","a","b","localeCompare","Button","variant","colorScheme","Link","to","expertise","Layout","Hero","section","Section","Head","SEO"],"sourceRoot":""}