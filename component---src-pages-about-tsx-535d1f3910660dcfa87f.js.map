{"version":3,"file":"component---src-pages-about-tsx-535d1f3910660dcfa87f.js","mappings":"4MAqFA,IA3DgBA,IAA6F,IAA5F,MAAEC,EAAK,YAAEC,EAAW,MAAEC,EAAK,gBAAEC,EAAe,UAAEC,EAAS,OAAEC,EAAM,SAAEC,GAAqB,EACrG,MAAMC,EAAa,CAAC,EAEhBJ,IAAiBI,EAAU,GAAIJ,GAC/BC,IAAWG,EAAa,MAAIH,GAC5BC,IAAQE,EAAU,GAAIF,GA4B1B,OACEG,EAAAA,cAACC,EAAAA,GAAG,eACFC,GAAG,UACHC,GAAI,CAAEC,KAAM,GAAIC,GAAI,KACfN,GAELC,EAAAA,cAACM,EAAAA,EAAS,CAACC,KAAK,MAAMC,GAAI,CAAEJ,KAAM,EAAGC,GAAI,IACvCL,EAAAA,cAACC,EAAAA,GAAG,CAACQ,MAAO,CAAEL,KAAM,OAAQC,GAAI,OAASK,GAAI,CAAEN,KAAM,EAAGC,GAAI,KAC1DL,EAAAA,cAACW,EAAAA,EAAO,CAACC,SAAU,CAAER,KAAM,MAAOC,GAAI,OAASQ,WAAW,YAAYH,GAAI,CAAEN,KAAM,EAAGC,GAAI,IAAKb,GAC7FC,GAAeO,EAAAA,cAACc,EAAAA,EAAI,CAACF,SAAU,CAAER,KAAM,KAAMC,GAAI,MAAQU,MAAM,SAAStB,IAE1EC,GACCM,EAAAA,cAACC,EAAAA,GAAG,CAACS,GAAI,CAAEN,KAAM,EAAGC,GAAI,KACtBL,EAAAA,cAACgB,EAAAA,EAAU,CAACC,QAAS,CAAEb,KAAM,EAAGC,GAAI,GAAKa,QAAS,CAAEd,KAAM,EAAGC,GAAI,KAvCvD,MAClB,QAAcc,IAAVzB,GAAwC,IAAjBA,EAAM0B,OAC/B,OAAO,KAGT,MAAMC,EAAY1B,EAAkBC,EAAY,WAEhD,OAAOF,EAAM4B,KAAKC,GAEdvB,EAAAA,cAACC,EAAAA,GAAG,KACDsB,EAAMC,MACLxB,EAAAA,cAACC,EAAAA,GAAG,CAACS,GAAI,CAAEN,KAAM,EAAGC,GAAI,IAAKL,EAAAA,cAACyB,EAAAA,EAAI,CAACvB,GAAIqB,EAAMC,KAAME,QAAS,CAAEtB,KAAM,EAAGC,GAAI,GAAKU,MAAOQ,EAAMF,WAAaA,KAE5GrB,EAAAA,cAACW,EAAAA,EAAO,CAACC,SAAU,CAAE,KAAQ,MAAO,GAAM,OAASC,WAAW,WAAWH,GAAI,GAAIa,EAAM/B,OACtFmC,MAAMC,QAAQL,EAAM9B,aACnBO,EAAAA,cAAC6B,EAAAA,EAAK,CAACC,UAAU,SAASZ,QAAS,CAAEd,KAAM,EAAGC,GAAI,IAC/CkB,EAAM9B,YAAY6B,KAAIS,GAAc/B,EAAAA,cAACc,EAAAA,EAAI,CAACF,SAAS,MAAMmB,MAG5D/B,EAAAA,cAACc,EAAAA,EAAI,CAACF,SAAS,MAAMW,EAAM9B,eAIjC,EAiBSuC,KAIPhC,EAAAA,cAACC,EAAAA,GAAG,CAACS,GAAI,CAAEN,KAAM,EAAGC,GAAI,KACrBP,IAGD,C,qJC7ELmC,EAAsBC,IAAmB,OAAc,CAC1DC,KAAM,sBACNC,SAAU,kBACVC,aAAc,c,oBCChB,SAASC,EAASH,GAChB,IAAII,EACJ,MAAMC,EAAQL,EAAKM,MAAM,KACnBC,EAA+B,OAAlBH,EAAKC,EAAM,IAAcD,EAAK,GAC3CI,EAAWH,EAAMpB,OAAS,EAAIoB,EAAMA,EAAMpB,OAAS,GAAK,GAC9D,OAAOsB,GAAaC,EAAW,GAAGD,EAAUE,OAAO,KAAKD,EAASC,OAAO,KAAOF,EAAUE,OAAO,EAClG,CACA,SAASC,EAAW9C,GAClB,MAAM,KAAEoC,EAAI,YAAEW,KAAgBC,GAAShD,EACjCiD,EAASd,IACf,OAAuB,IAAAe,KAAI,QAAY,CAAEC,KAAM,MAAO,aAAcf,KAASY,EAAMI,MAAOH,EAAOI,MAAOtD,SAAUqC,EAAsB,MAAfW,OAAsB,EAASA,EAAYX,GAAQ,MAC9K,CACAU,EAAWQ,YAAc,aCfzB,IAAIC,EAAqBvD,IAA0B,IAAAwD,MACjD,QACA,CACEC,QAAS,cACTzC,MAAO,OACPN,MAAO,OACPgD,OAAQ,OACRC,UAAW,wBACR3D,EACHD,SAAU,EACQ,IAAAmD,KACd,OACA,CACEU,KAAM,eACNC,EAAG,mMAGS,IAAAX,KACd,OACA,CACEU,KAAM,eACNC,EAAG,kM,UCbb,SAASC,EAAY9D,GACnB,MAAM,IACJ+D,EAAG,OACHC,EAAM,QACNC,EAAO,OACPC,EAAM,YACNnB,EAAW,KACXX,EAAI,aACJ+B,EAAY,QACZC,EAAO,UACPC,EAAS,KACT5C,GAAuB,IAAAyB,KAAIK,EAAmB,CAAC,GAAE,eACjDe,EAAc,eACdC,EAAc,YACdC,GACExE,EACEyE,GAAS,OAAS,CAAEV,MAAKE,UAASO,cAAaF,mBAGrD,OADsBP,KADO,WAAXU,GAGTrC,GAAuB,IAAAc,KAC5BJ,EACA,CACEa,UAAW,0BACXZ,cACAX,UAEA,IAAAsC,cAAajD,EAAM,CACrB0B,KAAM,MACN,aAAckB,KAGK,IAAAnB,KACrB,QACA,CACEa,MACAC,SACAW,IAAKvC,EACL8B,SACAK,iBACAC,YAA4B,MAAfA,EAAsBA,OAAc,EACjDb,UAAW,qBACXS,UACAhB,MAAO,CACL1C,MAAO,OACPgD,OAAQ,OACRkB,UAAW,QACXT,iBAIR,CACAL,EAAYR,YAAc,c,4CCzCtBuB,EAAY,CACdC,QAAS,cACTC,WAAY,SACZC,eAAgB,SAChBC,UAAW,SACXC,cAAe,YACfpE,WAAY,SACZqE,SAAU,WACVC,WAAY,GAEVC,GAAS,QAAW,CAACrF,EAAOsF,KAC9B,MAAMrC,GAAS,QAAoB,SAAUjD,IACtCuF,EAAUC,IAAe,IAAAC,WAAS,IACnC,IACJ1B,EAAG,OACHC,EAAM,KACN5B,EAAI,WACJsD,EAAU,aACVvB,EAAe,OAAM,QACrBF,EACAC,OAAQyB,EAAU,YAClB5C,EAAcR,EAAQ,KACtBd,GAAuB,IAAAyB,KAAIK,EAAmB,CAAC,GAAE,UACjDc,EAAY,UAAS,QACrBD,EAAO,SACPrE,EAAQ,YACR6F,EAAW,eACXtB,EAAc,YACdE,EAAW,eACXD,KACGvB,IACD,QAAiBhD,GACf6F,EAAe,CACnB1B,eACA2B,YAAaJ,EAAa,WAAQ,KAC/Bb,KACA5B,EAAO8C,WAKZ,OAHIH,IACFC,EAAaD,YAAcA,IAEN,IAAA1C,KACrB,SACA,CACEoC,SACGtC,EACHW,WAAW,IAAAqC,IAAG,gBAAiBhG,EAAM2D,WACrC,eAAe,QAAS4B,GACxBnC,MAAOyC,EACP9F,UAA0B,IAAAyD,MAAKtB,EAAsB,CAAEV,MAAOyB,EAAQlD,SAAU,EAC9D,IAAAmD,KACdY,EACA,CACEC,MACAC,SACAI,UACAF,QAAQ,QAAgByB,GAAY,KAClCH,GAAY,EAAK,IAEnBvB,UACAlB,cACAX,OACA+B,eACA1C,OACA4C,YACAC,iBACAE,cACAD,mBAGJxE,MAGL,IAEHsF,EAAO/B,YAAc,S,cCxFjB2C,GAAU,QAAW,SAAkBjG,EAAOsF,GAChD,MAAM,gBACJY,EAAe,kBACfC,EAAiB,eACjBC,EAAc,iBACdC,EAAgB,YAChBP,EAAW,YACXQ,EAAW,YACXV,KACG3C,IACD,QAAe,UAAWjD,IACxB,UACJ2D,EAAS,YACT4C,EAAc,aAAY,MAC1BnD,KACGJ,IACD,QAAiBhD,GACfwG,EAAgB,CACpBC,SAAU,CACRP,gBAAiBA,GAAmBG,GAAoBP,GAAe,MACvEpC,OAAQ,QAEVgD,WAAY,CACVP,kBAAmBA,GAAqBC,GAAkBN,GAAe,MACzEpF,MAAO,SAGX,OAAuB,IAAAwC,KACrB,OACA,CACEoC,MACA,mBAAoBiB,KACjBvD,EACHI,MAAO,IACFH,EACH0D,OAAQ,IACRf,cACAU,iBACGE,EAAcD,MACdnD,GAELO,WAAW,IAAAqC,IAAG,iBAAkBrC,IAGtC,IACAsC,EAAQ3C,YAAc,U,gECtCtB,MAAMsD,EAAU,CACZC,UAAW,WACXC,gBACI,2FACJC,SAAU,CACN,CACItH,MAAO,YACPC,YACI,oVACJE,gBAAiB,SAErB,CACIH,MAAO,cACPC,YACI,0FACJE,gBAAiB,UACjBD,MAAO,CACH,CACIF,MAAO,2BACPC,YACI,4JAER,CACID,MAAO,qBACPC,YACI,0LAER,CACID,MAAO,kBACPC,YACI,8JAER,CACID,MAAO,2BACPC,YACI,+IAIhB,CACID,MAAO,YACPE,MAAO,CACH,CACIF,MAAO,uBACPC,YACI,qMAER,CACID,MAAO,qBACPC,YACI,uOAER,CACID,MAAO,mBACPC,YACI,uOAER,CACID,MAAO,qBACPC,YACI,sRAER,CACID,MAAO,gCACPC,YACI,gTAER,CACID,MAAO,+BACPC,YACI,4OAGZE,gBAAiB,QACjBoH,SAAU,YACVlH,OAAQ,aAEZ,CACIL,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","sources":["webpack://focus-consulting/./src/layout/Section.tsx","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/chunk-RD3LQCU3.mjs","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/chunk-O25PJXSD.mjs","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/chunk-CXYPMOCL.mjs","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/chunk-V2ATFO44.mjs","webpack://focus-consulting/./node_modules/@chakra-ui/avatar/dist/chunk-V7PAE35Z.mjs","webpack://focus-consulting/./node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs","webpack://focus-consulting/./src/pages/about.tsx"],"sourcesContent":["import {\n  Box,\n  Heading,\n  ButtonGroup,\n  Container,\n  SimpleGrid,\n  Stack,\n  IconButton,\n  Text,\n  useBreakpointValue,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport * as React from 'react'\nimport { FiMenu } from 'react-icons/fi'\nimport { Icon } from '@chakra-ui/react'\n\ninterface MainProps {\n  title: string,\n  description?: string,\n  items?: { title: string, description: string, icon? : any, iconColor?: string }[], \n  backgroundColor?: string,\n  fontColor?: string,\n  anchor?: string,\n  children: any,\n}\n\nconst Section = ({ title, description, items, backgroundColor, fontColor, anchor, children }: MainProps) => {\n  const props: any = {}\n\n  if (backgroundColor) props['bg'] = backgroundColor;\n  if (fontColor) props['color'] = fontColor;\n  if (anchor) props['id'] = anchor;\n  \n  const renderItems = () => {\n    if (items === undefined || items.length === 0) {\n      return null;\n    }    \n\n    const iconColor = backgroundColor ? fontColor : 'gray.600';\n\n    return items.map((value) => {\n      return (\n        <Box>\n          {value.icon && (\n            <Box mb={{ base: 1, md: 1 }}><Icon as={value.icon} boxSize={{ base: 9, md: 9 }} color={value.iconColor || iconColor} /></Box>\n          )}\n          <Heading fontSize={{ 'base': '3xl', 'md': '3xl' }} fontWeight=\"semibold\" mb={2}>{value.title}</Heading>\n          {Array.isArray(value.description) ? (\n            <Stack direction=\"column\" spacing={{ base: 6, md: 6 }}>\n              {value.description.map(paragraph => (<Text fontSize=\"xl\">{paragraph}</Text>))}\n            </Stack>\n          ) : (\n            <Text fontSize=\"xl\">{value.description}</Text>\n          )}          \n        </Box>      \n      );\n    });\n  }\n\n  return (    \n    <Box\n      as=\"section\"\n      py={{ base: 16, md: 12}}\n      { ...props }\n    >\n      <Container maxW=\"6xl\" px={{ base: 5, md: 0 }}>\n        <Box width={{ base: '100%', md: '75%' }} mb={{ base: 8, md: 12}}>\n          <Heading fontSize={{ base: '4xl', md: '5xl' }} fontWeight=\"extrabold\" mb={{ base: 1, md: 2}}>{title}</Heading>\n          {description && <Text fontSize={{ base: 'lg', md: 'xl' }} color=\"muted\">{description}</Text>}          \n        </Box>\n        {items && (\n          <Box mb={{ base: 8, md: 12}}>\n            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={{ base: 8, md: 16 }}>\n              {renderItems()}\n            </SimpleGrid>\n          </Box>          \n        )}\n        <Box mb={{ base: 8, md: 12}}>\n          {children}\n        </Box>        \n      </Container>\n    </Box>\n  )\n}\n\nexport default Section;","'use client'\n\n// src/avatar-context.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [AvatarStylesProvider, useAvatarStyles] = createContext({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\"\n});\n\nexport {\n  AvatarStylesProvider,\n  useAvatarStyles\n};\n//# sourceMappingURL=chunk-RD3LQCU3.mjs.map","'use client'\nimport {\n  useAvatarStyles\n} from \"./chunk-RD3LQCU3.mjs\";\n\n// src/avatar-name.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction initials(name) {\n  var _a;\n  const names = name.split(\" \");\n  const firstName = (_a = names[0]) != null ? _a : \"\";\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\";\n  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);\n}\nfunction AvatarName(props) {\n  const { name, getInitials, ...rest } = props;\n  const styles = useAvatarStyles();\n  return /* @__PURE__ */ jsx(chakra.div, { role: \"img\", \"aria-label\": name, ...rest, __css: styles.label, children: name ? getInitials == null ? void 0 : getInitials(name) : null });\n}\nAvatarName.displayName = \"AvatarName\";\n\nexport {\n  initials,\n  AvatarName\n};\n//# sourceMappingURL=chunk-O25PJXSD.mjs.map","'use client'\n\n// src/generic-avatar-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar GenericAvatarIcon = (props) => /* @__PURE__ */ jsxs(\n  chakra.svg,\n  {\n    viewBox: \"0 0 128 128\",\n    color: \"#fff\",\n    width: \"100%\",\n    height: \"100%\",\n    className: \"chakra-avatar__svg\",\n    ...props,\n    children: [\n      /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n        }\n      ),\n      /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n        }\n      )\n    ]\n  }\n);\n\nexport {\n  GenericAvatarIcon\n};\n//# sourceMappingURL=chunk-CXYPMOCL.mjs.map","'use client'\nimport {\n  AvatarName\n} from \"./chunk-O25PJXSD.mjs\";\nimport {\n  GenericAvatarIcon\n} from \"./chunk-CXYPMOCL.mjs\";\n\n// src/avatar-image.tsx\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */ jsx(GenericAvatarIcon, {}),\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin\n  } = props;\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /* @__PURE__ */ jsx(\n      AvatarName,\n      {\n        className: \"chakra-avatar__initials\",\n        getInitials,\n        name\n      }\n    ) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  return /* @__PURE__ */ jsx(\n    chakra.img,\n    {\n      src,\n      srcSet,\n      alt: name,\n      onLoad,\n      referrerPolicy,\n      crossOrigin: crossOrigin != null ? crossOrigin : void 0,\n      className: \"chakra-avatar__img\",\n      loading,\n      __css: {\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius\n      }\n    }\n  );\n}\nAvatarImage.displayName = \"AvatarImage\";\n\nexport {\n  AvatarImage\n};\n//# sourceMappingURL=chunk-V2ATFO44.mjs.map","'use client'\nimport {\n  AvatarImage\n} from \"./chunk-V2ATFO44.mjs\";\nimport {\n  initials\n} from \"./chunk-O25PJXSD.mjs\";\nimport {\n  AvatarStylesProvider\n} from \"./chunk-RD3LQCU3.mjs\";\nimport {\n  GenericAvatarIcon\n} from \"./chunk-CXYPMOCL.mjs\";\n\n// src/avatar.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */ jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      ref,\n      ...rest,\n      className: cx(\"chakra-avatar\", props.className),\n      \"data-loaded\": dataAttr(isLoaded),\n      __css: avatarStyles,\n      children: /* @__PURE__ */ jsxs(AvatarStylesProvider, { value: styles, children: [\n        /* @__PURE__ */ jsx(\n          AvatarImage,\n          {\n            src,\n            srcSet,\n            loading,\n            onLoad: callAllHandlers(onLoadProp, () => {\n              setIsLoaded(true);\n            }),\n            onError,\n            getInitials,\n            name,\n            borderRadius,\n            icon,\n            iconLabel,\n            ignoreFallback,\n            crossOrigin,\n            referrerPolicy\n          }\n        ),\n        children\n      ] })\n    }\n  );\n});\nAvatar.displayName = \"Avatar\";\n\nexport {\n  baseStyle,\n  Avatar\n};\n//# sourceMappingURL=chunk-V7PAE35Z.mjs.map","'use client'\n\n// src/divider.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef(function Divider2(props, ref) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props);\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.hr,\n    {\n      ref,\n      \"aria-orientation\": orientation,\n      ...rest,\n      __css: {\n        ...styles,\n        border: \"0\",\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css\n      },\n      className: cx(\"chakra-divider\", className)\n    }\n  );\n});\nDivider.displayName = \"Divider\";\n\nexport {\n  Divider\n};\n//# sourceMappingURL=chunk-W7WUSNWJ.mjs.map","import * as React from 'react'\n\nimport {\n    Avatar,\n    Box,\n    Button,\n    Divider,\n    Heading,\n    SimpleGrid,\n    Text,\n} from '@chakra-ui/react'\nimport { HeadFC, Link, PageProps } from 'gatsby'\n\nimport Hero2 from '../layout/Hero'\nimport Layout from '../layout/Layout'\nimport { SEO } from '../components/seo'\nimport Section from '../layout/Section'\n\nconst content = {\n    heroTitle: 'About Us',\n    heroDescription:\n        'We are a minority-owned digital services company focused on projects with social impact.',\n    sections: [\n        {\n            title: 'Our Story',\n            description:\n                'Focus was founded in 2019 to bring together a diverse set of industry and government experiences, and best-in-class digital services capabilities in agile software development, human-centered design, and DevSecOps. Our projects span work that addresses equity, healthcare, benefits, and learning across government and commercial clients.',\n            backgroundColor: 'white',\n        },\n        {\n            title: 'Core Values',\n            description:\n                'Our values guide both how we work with our colleagues and how we view our partnerships.',\n            backgroundColor: 'gray.50',\n            items: [\n                {\n                    title: 'Clarity and transparency',\n                    description:\n                        'Our jobs involve taking complicated topics and working to remove the ambiguity; our clients rely on us to work and communicate honestly and efficiently.',\n                },\n                {\n                    title: 'Do the right thing',\n                    description:\n                        \"We always come prepared, researching and documenting before raising topics with our clients.  We respect our clients' time by asking questions that get to the root of things faster. \",\n                },\n                {\n                    title: 'Do what you say',\n                    description:\n                        'Our reputation with our clients is critical to our success as a business and that reputation is built by consistently delivering on what we promise to do.',\n                },\n                {\n                    title: 'Exhibit a growth mindset',\n                    description:\n                        'The industry is constantly evolving, and in order to stay relevant we constantly grow our skill sets to serve current and future clients.',\n                },\n            ],\n        },\n        {\n            title: 'Expertise',\n            items: [\n                {\n                    title: 'Software Engineering',\n                    description:\n                        'We bring deep expertise in full-stack web development using agile development processes. Our staff have successfully built and maintained high complexity applications serving millions of users.',\n                },\n                {\n                    title: 'Research & Design ',\n                    description:\n                        'We center our work on human-centered design and research to gain deep insights into user challenges and needs. We use user research and testing before and after feature launches to gain insights and make our work more valuable.',\n                },\n                {\n                    title: 'Data Engineering',\n                    description:\n                        'Our teams have strong experience processing, transforming, integrating, and synthesizing large volumes of diverse data sets. We have a depth of experience working with healthcare data across government, insurers, and hospitals.',\n                },\n                {\n                    title: 'Product Management',\n                    description:\n                        'Our product managers work with their design and research colleagues to understand customer needs, work with our stakeholders, and craft high value solutions. We make data-driven product decisions by defining and tracking success metrics within an agile development approach.',\n                },\n                {\n                    title: 'DevOps & Cloud Infrastructure',\n                    description:\n                        'We develop and improve robust CI/CD processes that free up developers to focus on providing user value, accessibility, and privacy. We work across the cloud ecosystem (AWS, Azure, Google Cloud). We use infrastructure as code approach to consistently define our cloud resources with automated deploys.',\n                },\n                {\n                    title: 'Project & Program Management',\n                    description:\n                        'Our project managers tie everything together by supporting our planning, stakeholder coordination, and delivery work. We use strong documentation and communication practices to work efficiently in an increasingly distributed world.',\n                },\n            ],\n            backgroundColor: 'white',\n            customId: 'expertise',\n            anchor: 'expertise',\n        },\n        {\n            title: 'Core Team',\n            description: 'Meet our diverse team of technologists.',\n            customId: 'team',\n        },\n    ],\n}\n\nconst team = [\n    {\n      name: 'Japhet Teshale',\n      title: 'Software Engineer',\n      photo: '/images/staff/japhet-teshale.png',\n      department: 'engineering',\n    },\n    {\n        name: 'Eyuel Abebe',\n        title: 'Software Engineer',\n        photo: '/images/staff/eyuel.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Ant Addis',\n        title: 'CEO',\n        photo: '/images/staff/anteneh-3.webp',\n        department: 'leadership',\n    },\n    {\n        name: 'Kolawole Balegun',\n        title: 'Software Engineer',\n        photo: '/images/staff/kola.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Iverson Diles',\n        title: 'Software Engineer',\n        photo: '/images/staff/iverson-diles.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Sid Hackney',\n        title: 'Software Engineer',\n        photo: '/images/staff/sid.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Michael Kalish',\n        title: 'CTO',\n        photo: '/images/staff/kalish-profile.webp',\n        department: 'leadership',\n    },\n    {\n        name: 'Bethlehem Mulugeta',\n        title: 'Recruiting',\n        department: 'support',\n    },\n    {\n        name: 'Kevon Paynter',\n        title: 'Product Manager',\n        photo: '/images/staff/kevon.webp',\n        department: 'product',\n    },\n    {\n        name: 'Mike Liu',\n        title: 'Software Engineer',\n        department: 'engineering',\n    },\n    {\n        name: 'Gabriel Dorsch',\n        title: 'Software Engineer',\n        photo: '/images/staff/gabriel.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Thu Pham',\n        title: 'Software Engineer',\n        department: 'engineering',\n    },\n    {\n        name: 'Jack Wang',\n        title: 'Software Engineer',\n        photo: '/images/staff/jack-wang.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Kant Kodali',\n        title: 'Software Engineer',\n        photo: '/images/staff/kant_kodali.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Jamie Albinson',\n        title: 'Software Engineer',\n        photo: '/images/staff/jamie-albinson.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Logan Ricard',\n        title: 'Software Engineer',\n        photo: '/images/staff/logan-ricard.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Carl Hicks',\n        title: 'Support Engineer',\n        photo: '/images/staff/carl-hicks.webp',\n        department: 'engineering',\n    },\n    {\n        name: 'Tshering Yudon',\n        title: 'Designer',\n        photo: '/images/staff/tshering-yudon.webp',\n        department: 'product',\n    },\n]\n\nconst AboutPage: React.FC<PageProps> = () => {\n    const customRenderMap: any = {\n        team: () => {\n            return (\n                <>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Leadership</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) =>\n                                        person.department == 'leadership'\n                                )\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Product</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) => person.department == 'product'\n                                )\n                                .sort((a, b) => a.name.localeCompare(b.name))\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box marginBottom=\"5\">\n                        <Heading marginBottom=\"10\">Engineering</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) =>\n                                        person.department == 'engineering'\n                                )\n                                .sort((a, b) => a.name.localeCompare(b.name))\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Divider />\n                    </Box>\n                    <Box>\n                        <Heading marginBottom=\"10\">Support</Heading>\n                        <SimpleGrid\n                            columns={{ base: 2, md: 4 }}\n                            mb={{ base: 12, md: 12 }}\n                            spacing=\"10\"\n                        >\n                            {team\n                                .filter(\n                                    (person) => person.department == 'support'\n                                )\n                                .map((person) => {\n                                    return (\n                                        <Box>\n                                            <Avatar\n                                                name={person.name}\n                                                size={{ base: 'xl', md: '2xl' }}\n                                                mb={2}\n                                                src={person.photo}\n                                            />\n                                            <Text\n                                                fontSize={{\n                                                    base: 'xl',\n                                                    md: '2xl',\n                                                }}\n                                                fontWeight=\"semibold\"\n                                                mb={1}\n                                            >\n                                                {person.name}\n                                            </Text>\n                                            <Text\n                                                fontSize={{\n                                                    base: 'lg',\n                                                    md: 'xl',\n                                                }}\n                                            >\n                                                {person.title}\n                                            </Text>\n                                        </Box>\n                                    )\n                                })}\n                        </SimpleGrid>\n                        <Button\n                            variant=\"solid\"\n                            fontSize={{ base: '2xl', md: '2xl' }}\n                            colorScheme=\"blue\"\n                            as={Link}\n                            to=\"/careers\"\n                        >\n                            Join the Team\n                        </Button>\n                    </Box>\n                </>\n            )\n        },\n        expertise: () => {\n            return (\n                <Button\n                    variant=\"solid\"\n                    fontSize={{ base: '2xl', md: '2xl' }}\n                    colorScheme=\"blue\"\n                    as={Link}\n                    to=\"/our-work\"\n                >\n                    See Examples of Our Work\n                </Button>\n            )\n        },\n    }\n\n    return (\n        <Layout>\n            <Hero2\n                heading={\n                    <Heading\n                        as=\"h1\"\n                        color=\"white\"\n                        fontSize={{ base: '5xl', md: '7xl' }}\n                        fontWeight={700}\n                        lineHeight={'120%'}\n                        mb=\"6\"\n                    >\n                        {content.heroTitle}\n                    </Heading>\n                }\n                subHeading={content.heroDescription}\n            />\n            {content.sections.map((section) => {\n                return (\n                    <Section\n                        title={section.title}\n                        description={section.description}\n                        backgroundColor={section.backgroundColor}\n                        items={section.items}\n                        anchor={section.anchor}\n                    >\n                        {section.customId &&\n                            customRenderMap[section.customId]()}\n                    </Section>\n                )\n            })}\n        </Layout>\n    )\n}\n\nexport default AboutPage\n\nexport const Head: HeadFC = () => <SEO title=\"Focus - About\" />\n"],"names":["_ref","title","description","items","backgroundColor","fontColor","anchor","children","props","React","Box","as","py","base","md","Container","maxW","px","width","mb","Heading","fontSize","fontWeight","Text","color","SimpleGrid","columns","spacing","undefined","length","iconColor","map","value","icon","Icon","boxSize","Array","isArray","Stack","direction","paragraph","renderItems","AvatarStylesProvider","useAvatarStyles","name","hookName","providerName","initials","_a","names","split","firstName","lastName","charAt","AvatarName","getInitials","rest","styles","jsx","role","__css","label","displayName","GenericAvatarIcon","jsxs","viewBox","height","className","fill","d","AvatarImage","src","srcSet","onError","onLoad","borderRadius","loading","iconLabel","ignoreFallback","referrerPolicy","crossOrigin","status","cloneElement","alt","objectFit","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","position","flexShrink","Avatar","ref","isLoaded","setIsLoaded","useState","showBorder","onLoadProp","borderColor","avatarStyles","borderWidth","container","cx","Divider","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderStyle","orientation","dividerStyles","vertical","horizontal","border","content","heroTitle","heroDescription","sections","customId","team","photo","department","customRenderMap","marginBottom","filter","person","size","sort","a","b","localeCompare","Button","variant","colorScheme","Link","to","expertise","Layout","Hero2","heading","lineHeight","subHeading","section","Section","Head","SEO"],"sourceRoot":""}